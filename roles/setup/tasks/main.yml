---
- name: Disable dev-sda3.swap
  ansible.builtin.systemd:
    name: dev-sda3.swap
    enabled: false
    masked: true
  when:
    - ansible_distribution == "Ubuntu"
    - ansible_distribution_version == "22.04"

- name: Disable swap immediately
  ansible.builtin.command: swapoff -a
  when: ansible_swaptotal_mb | default(0) | int > 0
  changed_when: ansible_swaptotal_mb | default(0) | int > 0

- name: Permanently disable swap in /etc/fstab
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '(^[^#].*\sswap\s.*)'
    replace: '# \1'

- name: Disable firewalld (RedHat)
  ansible.builtin.systemd:
    name: firewalld
    state: stopped
    enabled: false
  when: ansible_os_family == "RedHat"

- name: Disable ufw (Ubuntu/Debian)
  ansible.builtin.service:
    name: ufw
    state: stopped
    enabled: false
  when: ansible_os_family == "Debian"

- name: Disable NetworkManager (RedHat)
  ansible.builtin.systemd:
    name: NetworkManager
    state: stopped
    enabled: false
  when: ansible_os_family == "RedHat"

- name: Check if NetworkManager is installed (Debian/Ubuntu)
  ansible.builtin.shell: |
    dpkg -l | grep -q '^ii  network-manager '
  register: setup_nm_installed
  failed_when: false
  changed_when: false
  when: ansible_os_family == "Debian"

- name: Remove NetworkManager if installed
  ansible.builtin.apt:
    name: network-manager
    state: absent
  when:
    - ansible_os_family == "Debian"
    - setup_nm_installed.rc == 0

- name: Build host_entries list manually
  ansible.builtin.set_fact:
    setup_host_entries: "{{ setup_host_entries | default([]) + [{'host_name': item.host_name, 'private_ip': item.private_ip}] }}"
  loop: "{{ (kube_control_plane.values() | list) + (kube_node.values() | list) + (haproxy.values() | list) }}"

- name: Add entries to /etc/hosts
  ansible.builtin.lineinfile:
    path: /etc/hosts
    line: "{{ item.private_ip }} {{ item.host_name }}"
    regexp: "^{{ item.private_ip }}\\s+{{ item.host_name }}$"
    state: present
    backup: true
  loop: "{{ setup_host_entries }}"
  when: setup_host_entries | length > 0

- name: Ensure /etc/modules-load.d/k8s.conf exists
  ansible.builtin.copy:
    dest: /etc/modules-load.d/k8s.conf
    content: |
      overlay
      br_netfilter
    owner: root
    group: root
    mode: '0644'

- name: Ensure overlay module is loaded
  community.general.modprobe:
    name: overlay
    state: present

- name: Ensure br_netfilter module is loaded
  community.general.modprobe:
    name: br_netfilter
    state: present

- name: Ensure /etc/sysctl.d/k8s.conf exists
  ansible.builtin.copy:
    dest: /etc/sysctl.d/k8s.conf
    content: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward                 = 1
    owner: root
    group: root
    mode: '0644'

- name: Apply sysctl configuration
  ansible.builtin.command: sysctl --system
  changed_when: false

- name: Install chrony for time sync
  ansible.builtin.package:
    name: chrony
    state: present

- name: Enable and start chrony (RedHat)
  ansible.builtin.service:
    name: chronyd
    state: started
    enabled: true
  when: ansible_os_family == "RedHat"

- name: Enable and start chrony (Ubuntu/Debian)
  ansible.builtin.service:
    name: chrony
    state: started
    enabled: true
  when: ansible_os_family == "Debian"

- name: Apt install misc packages
  ansible.builtin.apt:
    name: ['apt-transport-https', 'ca-certificates', 'curl', 'gnupg']
    update_cache: true

- name: Set control_plane_endpoint /etc/hosts for k8s
  ansible.builtin.lineinfile:
    path: /etc/hosts
    state: present
    backup: true
    regexp: '[1-2]?[0-9]?[0-9]\.[1-2]?[0-9]?[0-9]\.[1-2]?[0-9]?[0-9]\.[1-2]?[0-9]?[0-9]\ control.plane.endpoint'
    line: '{{ control_plane_endpoint }} control.plane.endpoint'

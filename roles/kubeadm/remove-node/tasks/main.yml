---
- name: Drain the node
  delegate_to: "{{ groups['kube_control_plane'][0] }}"
  block:
    - name: Get node name
      ansible.builtin.shell: kubectl get nodes -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}' | grep -i "{{ inventory_hostname }}"
      register: kubectl_node_name
      retries: 5
      delay: 5
      changed_when: false
      until: kubectl_node_name.rc == 0

    - name: Drain the node
      ansible.builtin.command: kubectl drain {{ kubectl_node_name.stdout }} --ignore-daemonsets --delete-emptydir-data --force
      register: drain_result
      retries: 5
      delay: 5
      changed_when: false
      until: drain_result.rc == 0

    - name: Show drain result
      ansible.builtin.debug:
        msg: "{{ drain_result.stdout_lines }}"

    - name: Wait drain completes
      ansible.builtin.pause:
        seconds: 10
      when: "'kube_node' in group_names"

    - name: Get node status
      ansible.builtin.command: kubectl get nodes {{ kubectl_node_name.stdout }} -o wide
      register: node_name_status
      retries: 5
      delay: 5
      changed_when: false
      until: node_name_status.rc == 0

    - name: Show node status
      ansible.builtin.debug:
        msg: "{{ node_name_status.stdout_lines }}"

- name: Kubeadm reset
  block:
    - name: Kubeadm reset
      ansible.builtin.shell: |
        kubeadm reset -f
      changed_when: false
      register: kubeadm_reset_log
    - name: Show kubeadm reset result
      ansible.builtin.debug:
        msg: "{{ kubeadm_reset_log.stdout_lines }}"
    - name: Iptables flash
      ansible.builtin.shell: |
        iptables -F && iptables -t nat -F && iptables -t mangle -F && iptables -X
      changed_when: false
    - name: Delete cni config
      ansible.builtin.shell: |
        rm -rf /etc/cni/
      changed_when: false
    - name: Delete kube config
      ansible.builtin.shell: |
        rm -rf $HOME/.kube
      changed_when: false
      when: "'kube_control_plane' in group_names"

- name: Delete nodes from k8s cluster
  delegate_to: "{{ groups['kube_control_plane'][0] }}"
  when: "inventory_hostname != groups['kube_control_plane'][0]"
  block:
    - name: Delete node
      ansible.builtin.shell: |
        kubectl delete node {{ kubectl_node_name.stdout }}
      register: node_delete_log
      retries: 5
      delay: 5
      changed_when: false
      until: node_delete_log.rc == 0
    - name: Get node status
      ansible.builtin.command: kubectl get nodes -o wide
      register: node_status
      retries: 5
      delay: 5
      changed_when: false
      until: node_status.rc == 0
    - name: Show node status
      ansible.builtin.debug:
        msg: "{{ node_status.stdout_lines }}"

- name: Reboot the server and wait for it to come back
  ansible.builtin.reboot:
    reboot_timeout: 600
    msg: "Reboot initiated by Ansible"
